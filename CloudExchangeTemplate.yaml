---
AWSTemplateFormatVersion: 2010-09-09
Description: "CloudExchange 3.0"
Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups: 
      - 
        Label: 
          default: "Existing VPC info"
        Parameters: 
          - VPCId
          - PrivateSubnet1ID
          - PrivateSubnet2ID
    ParameterLabels: 
      VPCId:
        default: 'Existing VPC Id'
      PrivateSubnet1ID:
        default: 'Existing Private Subnet ID 1'
      PrivateSubnet2ID:
        default: 'Existing Private Subnet ID 2'
Parameters:
  VPCId:
    Type: AWS::EC2::VPC::Id
    Default: ''
    Description: 'Enter the existing VPC Id where Netskope Cloud Exchange will be deployed. '
  PrivateSubnet1ID:
    Type: AWS::EC2::Subnet::Id
    Default: ''
    Description: 'Enter the first Subnet ID where the EFS filesystem for Netskope Cloud Exchange will be deployed. Note that custom resource Lambda function in this stack should be able to communicate from this subnet to Amazon S3 regional endpoint'
  PrivateSubnet2ID:
    Type: AWS::EC2::Subnet::Id
    Default: ''
    Description: 'Enter the second Subnet ID where the EFS filesystem for Netskope Cloud Exchange will be deployed. Note that custom resource Lambda function in this stack should be able to communicate from this subnet to Amazon S3 regional endpoint'
    
Resources:
  NetskopeCloudExchangeTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub 'NetskopeCloudExchangeTaskExecutionRole-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  NetskopeCloudExchangeTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub 'NetskopeCloudExchangeTaskRole-${AWS::StackName}'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
      Path: /
      Policies:
        - PolicyName: !Sub 'NetskopeCloudExchangeTaskPolicy-${AWS::StackName}'
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "elasticfilesystem:ClientMount"
                  - "elasticfilesystem:ClientWrite"
                  - "ecr:GetAuthorizationToken"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                Resource: '*'
  
  TaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPCId
      GroupName: !Sub '${AWS::StackName}-NetskopeCloudExchangeTaskGroup'
      GroupDescription: Used by Netskope CloudExchange ECS task
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: '169.254.255.255/32'
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'

  NetskopeCloudExchangeEFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPCId
      GroupDescription: Grants EFS access to the VPC subnets
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !Ref TaskSecurityGroup
  NetskopeCloudExchangeEFS:
    Type: 'AWS::EFS::FileSystem'
    DependsOn: NetskopeCloudExchangeTaskRole
    Properties:
      BackupPolicy:
        Status: ENABLED
      Encrypted: true
      FileSystemTags:
        - Key: Name
          Value: !Sub 'NetskopeCloudExchange-${AWS::StackName}'
      FileSystemPolicy:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "elasticfilesystem:ClientMount"
              - "elasticfilesystem:ClientWrite"
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:role/NetskopeCloudExchangeTaskRole-${AWS::StackName}'
            Condition:
              Bool:
                'aws:SecureTransport': true

  MountTargetResource1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref NetskopeCloudExchangeEFS
      SubnetId: !Ref PrivateSubnet1ID
      SecurityGroups:
      - !Ref NetskopeCloudExchangeEFSSecurityGroup

  MountTargetResource2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref NetskopeCloudExchangeEFS
      SubnetId: !Ref PrivateSubnet2ID
      SecurityGroups:
      - !Ref NetskopeCloudExchangeEFSSecurityGroup

  MongoDBAccessPoint:
    Type: 'AWS::EFS::AccessPoint'
    Properties:
      FileSystemId: !Ref NetskopeCloudExchangeEFS
      PosixUser:
          Uid: "1001"
          Gid: "1001"
      RootDirectory:
        Path: "/data/mongo-data"
        CreationInfo:
          OwnerGid: "1001"
          OwnerUid: "1001"
          Permissions: "0777"
  SSLCertAccessPoint:
    Type: 'AWS::EFS::AccessPoint'
    Properties:
      FileSystemId: !Ref NetskopeCloudExchangeEFS
      PosixUser:
          Uid: "1001"
          Gid: "1001"
      RootDirectory:
        Path: "/data/ssl_certs"
        CreationInfo:
          OwnerGid: "1001"
          OwnerUid: "1001"
          Permissions: "0777"
  CustomPluginsAccessPoint:
    Type: 'AWS::EFS::AccessPoint'
    Properties:
      FileSystemId: !Ref NetskopeCloudExchangeEFS
      PosixUser:
          Uid: "1001"
          Gid: "1001"
      RootDirectory:
        Path: "/data/custom_plugins"
        CreationInfo:
          OwnerGid: "1001"
          OwnerUid: "1001"
          Permissions: "0777"
  RabbitMQAccessPoint:
    Type: 'AWS::EFS::AccessPoint'
    Properties:
      FileSystemId: !Ref NetskopeCloudExchangeEFS
      PosixUser:
          Uid: "1001"
          Gid: "1001"
      RootDirectory:
        Path: "/data/rabbitmq"
        CreationInfo:
          OwnerGid: "1001"
          OwnerUid: "1001"
          Permissions: "0777"
  NetskopeTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: "/aws/ecs/Netskope-Cloud-Exchange-3-0"
      RetentionInDays: 3653

  
Outputs:
  NetskopeCloudExchangeEFS:
    Value: !Ref NetskopeCloudExchangeEFS
    Description: EFS filesystem for Netskope Cloud Exchange
  MongoDBAccessPoint:
    Value: !Ref MongoDBAccessPoint
    Description: Mongo DB Access Point
  SSLCertAccessPoint:
    Value: !Ref SSLCertAccessPoint
    Description: SSL Certs Access Point
  CustomPluginsAccessPoint:
    Value: !Ref CustomPluginsAccessPoint
    Description: Custom Plugins Access Point
  RabbitMQAccessPoint:
    Value: !Ref RabbitMQAccessPoint
    Description: RabbitMQ Access Point
  NetskopeCloudExchangeTaskExecutionRole:
    Value: !GetAtt NetskopeCloudExchangeTaskExecutionRole.Arn
    Description: Netskope Cloud Exchange task execution role
  NetskopeCloudExchangeTaskRole:
    Value: !GetAtt NetskopeCloudExchangeTaskRole.Arn
    Description: Netskope Cloud Exchange task role


  TaskSecurityGroup:
    Value: !Ref TaskSecurityGroup
    Description: Security Group for Netskope CloudExchange ECS task
  